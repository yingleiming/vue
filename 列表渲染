
列表渲染
    1.v-for
    2.template v-fo
    3.数组变动检测
    4.对象v-for
    5.值域v-for
    6.显示过滤/排序的结果

    1.v-for
    使用v-for指令基于一个数组渲染一个列表
    <ul id="demo"> <li v-for="{{item in items}}"> {{item.message}} </li> </ul>
    new Vue({
        el:"#demo",
        data:{
            items:[
                {message:"FOO"},
                {message:"BAR"},
            ]
        }
    });

    示例:
    <div id="demo"> <p v-for="item in items"> {{item}} </p> </div>
    <script src="vue.js"></script>
    <script>
        new Vue({
            el:"#demo",
            data:{
                items:[
                    "FOO","BAR"
                ]
            }
        });

    </script>

    在v-for块内能访问到父组件作用域内的属性和数组索引$index:

    <ul id="demo"> <li v-for="(item,index) in items">{{parentMessage}}-{{index}}:{{item}} </li> </ul>
    <script src="vue.js"></script>
    <script>
        // $index 已经被移除
        new Vue({
            el:"#demo",
            data:{
                parentMessage:"清单", //父组件 每个li均会被添加
                items:[
                    "learn vue.js",
                    "learn jquery.js",
                    "learn react.js"
                ]
            }
        });
    </script>

    2.template v-for
    类似于 template v-if,也可以将 v-for应用在 template 上，以渲染一个包含多个元素的块。
    <ul id="demo">
        <template v-for="(item,index) in items">
            <p>{{parentMessage}} {{index}}:</p>
            <p>{{item}}</p>
        </template>
    </ul>
    <script src="vue.js"></script>
    <script>
        // $index 已经被移除
        new Vue({
            el:"#demo",
            data:{
                parentMessage:"清单",
                items:[
                    "learn vue.js",
                    "learn jquery.js",
                    "learn react.js"
                ]
            }
        });
    </script>

    3.数组变异检测
        3.1 变异方法
        3.2 替换数组
        3.3 track-by
        3.4 tack-by $index
        3.5 问题

        3.1 变异方法 原始数组发生改变
            3.1.1 push()/pop()
            3.1.2 shift()/unshift()
            3.1.3 splice()
            3.1.4 sort()/revers()
        3.2 替换数组
            不会改变原始数组而是返回一个新数组的非变异方法，直接用新数组替换旧数组
            3.2.1 filter()
            3.2.2 concat()
            3.2.3 slice()
            示例：
            demo.items = example.items.filter(function(item){
                return item.message.match(/FOO/);
            });
        3.3 track-by
            用全新对象替换数组，使用track-by特性给vue.js提示，以尽可能的复用已有实例
            (有key值)
            {
                items:[
                    { _uid:"1111ee333" },
                    { _uid:"2222ff555" },
                ]
            }
            示例:
            <div v-for="item in items" track-by="_uid">
                <!--  content  -->
            </div>
        3.3 track-by $index
            (无key值)
            使用 track-by = "$index",强制让v-for进入原位更新模式
            片段不会被移动，而是简单的以对应索引的新值进行刷新
            问题：DOM节点不再映射数组元素顺序的改变，不能同步临时状态以及组件的私有状态
        3.5 问题
            因为 javascript 的限制，vue.js不能检测到以下数组的变化
            a:直接用索引设置的元素，比如 vm.items[0] = {};
            b:修改数组的长度，比如 vm.items.length = 0;

            解决a: vue.js扩展了观察数组，为它添加了一个$set()方法:
                vm.items.$set(0,{childMsg:"changed"})
            解决b: 用一个同名的新数组 替换items

            除了$set()方法，Vue.js还为观察数组添加了$remove()方法，用于从目标数组中查找并删除元素，在内部自动调用splice()

            var index = this.items.indexOf(item);
            if(index !=-1){
                this.items.splice(item);
            }

            Vue.js写法
            this.items.$remove(item);




