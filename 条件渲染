
Vue 条件渲染
    1.v-if
    2.v-show
    3.v-else
    4.v-if 与 v-show

1.1 v-if 如果为真，执行...
    示例: <h1 v-if="ok"></h1>
    <div id="app">
        <h1 v-if="display">{{message}}</h1>
    </div>

    <script src="vue.js"></script>

    <script>
        var vm=new Vue({
            el:"#app",
            data:{
                message:"hello world !",
                display:true
            }
        });
        setTimeout(function () {
            vm.display=false;
        },2000)
    </script>
2.1 v-show
    v-show是简单的切换元素的css display属性。有v-show的元素会始终渲染并保持在DOM中。v-show不支持<template>语法
    示例:<h1 v-show="ok"></h1>
    <div id="app">
        <h1 v-show="display">{{message}}</h1>
    </div>

    <script src="vue.js"></script>

    <script>
        var vm=new Vue({
            el:"#app",
            data:{
                message:"hello world !",
                display:true
            }
        });
        setTimeout(function () {
            vm.display=false; //display:none
        },2000)
    </script>
3.1 v-else
    用v-else给v-if或者v-show添加添加一个"else块".
    示例:
    <div id="app">
        <h1 v-if="active">现在你可以看到我</h1>
        <h1 v-else>现在你看不到我</h1>
    </div>

    <script src="vue.js"></script>

    <script>
        var vm=new Vue({
            el:"#app",
            data:{
                active:true
            }
        });
        setTimeout(function () {
            vm.active=false
        },2000)
    </script>
    v-else元素必须立即跟在v-if或者v-show元素的后面--否则它不能被识别
4.1 v-if vs v-show
    v-if 是真实的条件渲染，它会确保条件块在切换当中合适的销毁与重建条件块内的事件监听器和子组件。有更高的切换消耗。
    v-show只是简单的基于css属性切换。有更高的初始渲染消耗。
    需要频繁消耗使用v-show,如果在运行时条件不大可能改变用v-if。